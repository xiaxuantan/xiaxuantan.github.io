{"version":3,"sources":["components/Footer/footer.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faGithub","faLinkedin","faWeibo","SOCIAL_MEDIA_MAPPING","Github","Weibo","Linkedin","Footer","props","socialMedia","Object","keys","map","key","Nav","Item","Link","href","icon","size","Card","className","Body","Text","activeKey","Navigation","navLinks","links","Navbar","bg","variant","Brand","SOCIAL_MEDIA","NAVIGATION_LINKS","Posts","Projects","Biography","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAQAA,IAAQC,IAAIC,IAAUC,IAAYC,KAGlC,IAAMC,EAAuB,CACzBC,OAAQJ,IACRK,MAAOH,IACPI,SAAUL,KAgCCM,EA7BA,SAACC,GAEZ,IAAMC,EAAcC,OAAOC,KAAKH,EAAMC,aAAaG,KAAI,SAAAC,GAAG,OAElD,kBAACC,EAAA,EAAIC,KAAL,CAAUF,IAAKA,GACX,kBAACC,EAAA,EAAIE,KAAL,CAAUC,KAAMT,EAAMC,YAAYI,IAC9B,kBAAC,IAAD,CAAiBK,KAAMf,EAAqBU,GAAMM,KAAK,YAMvE,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,wBACZ,kBAACD,EAAA,EAAKE,KAAN,KACI,kBAACF,EAAA,EAAKG,KAAN,yCAIJ,kBAACH,EAAA,EAAKb,OAAN,KACI,kBAACO,EAAA,EAAD,CAAKO,UAAU,yBAAyBG,UAAU,SAC7Cf,M,QCjBNgB,EAlBI,SAACjB,GAChB,IAAMkB,EAAWhB,OAAOC,KAAKH,EAAMmB,OAAOf,KAAI,SAAAC,GAAG,OAC7C,kBAACC,EAAA,EAAIE,KAAL,CAAUC,KAAMT,EAAMmB,MAAMd,GAAMA,IAAKA,GAAMA,MAEjD,OACI,kBAACe,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcd,KAAK,KAAnB,SACA,kBAACH,EAAA,EAAD,CAAKO,UAAU,WAKVK,KCVXM,EAAe,CACnB1B,SAAU,0CACVD,MAAO,kCACPD,OAAQ,qCAGJ6B,EAAmB,CACvBC,MAAO,SAEPC,SAAU,YACVC,UAAW,cAYEC,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAYX,MAAOM,IACnB,kBAAC,EAAD,CAAQxB,YAAauB,MCVPO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.28c98af9.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\n\nimport { faGithub, faLinkedin, faWeibo } from '@fortawesome/free-brands-svg-icons'\nimport { Card, Nav } from \"react-bootstrap\";\n\n\nlibrary.add(faGithub, faLinkedin, faWeibo);\n\n\nconst SOCIAL_MEDIA_MAPPING = {\n    Github: faGithub,\n    Weibo: faWeibo,\n    Linkedin: faLinkedin\n}\n\nconst Footer = (props) => {\n\n    const socialMedia = Object.keys(props.socialMedia).map(key =>\n        (\n            <Nav.Item key={key}>\n                <Nav.Link href={props.socialMedia[key]}>\n                    <FontAwesomeIcon icon={SOCIAL_MEDIA_MAPPING[key]} size=\"lg\" />\n                </Nav.Link>\n            </Nav.Item>\n        )\n    );\n\n    return (\n        <Card className=\"text-center border-0\">\n            <Card.Body>\n                <Card.Text>\n                    Copyright &#169; 2019 Xiaxuan Tan\n                </Card.Text>\n            </Card.Body>\n            <Card.Footer>\n                <Nav className=\"justify-content-center\" activeKey=\"/home\">\n                    {socialMedia}\n                </Nav>\n            </Card.Footer>\n        </Card>\n    )\n\n};\n\nexport default Footer","import React from 'react'\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nconst Navigation = (props) => {\n    const navLinks = Object.keys(props.links).map(key =>\n        <Nav.Link href={props.links[key]} key={key}>{key}</Nav.Link>\n    )\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" >\n            <Navbar.Brand href=\"/\">About</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                {/* <Nav.Link href=\"/posts\">Posts</Nav.Link>\n                <Nav.Link href=\"/publications\">Publications</Nav.Link>\n                <Nav.Link href=\"/projects\">Projects</Nav.Link>\n                <Nav.Link href=\"/biography\">Biography</Nav.Link> */}\n                {navLinks}\n            </Nav>\n        </Navbar >\n    );\n};\n\nexport default Navigation","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport Footer from './components/Footer/footer';\nimport Navigation from './components/Navigation/Navigation';\n\nconst SOCIAL_MEDIA = {\n  Linkedin: 'https://www.linkedin.com/in/xiaxuan-tan',\n  Weibo: 'https://www.weibo.com/peterxuan',\n  Github: 'https://www.github.com/xiaxuantan'\n}\n\nconst NAVIGATION_LINKS = {\n  Posts: '/posts',\n  // Publications: '/publications',\n  Projects: '/projects',\n  Biography: '/biography'\n}\n\nfunction App() {\n  return (\n    <Container>\n      <Navigation links={NAVIGATION_LINKS} />\n      <Footer socialMedia={SOCIAL_MEDIA} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}